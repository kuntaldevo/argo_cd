import pytest
from rules.convert_rule_dicts_to_system_dicts import ConvertRuleDictsToSystemDicts


@pytest.fixture
def _data():
    rule_dicts = {'Rule1': {'condition': 'AND',
                            'rules': [{'condition': 'OR',
                                       'rules': [{'field': 'payer_id_sum_approved_txn_amt_per_paypalid_1day',
                                                  'operator': 'greater_or_equal',
                                                  'value': 60.0},
                                                 {'field': 'payer_id_sum_approved_txn_amt_per_paypalid_7day',
                                                  'operator': 'greater',
                                                  'value': 120.0},
                                                 {'field': 'payer_id_sum_approved_txn_amt_per_paypalid_30day',
                                                  'operator': 'less_or_equal',
                                                  'value': 500.0}]},
                                      {'field': 'num_items', 'operator': 'equal', 'value': 1.0}]},
                  'Rule2': {'condition': 'AND',
                            'rules': [{'field': 'ml_cc_v0', 'operator': 'less', 'value': 0.315},
                                      {'condition': 'OR',
                                       'rules': [{'field': 'method_clean',
                                                  'operator': 'equal',
                                                  'value': 'checkout'},
                                                 {'field': 'method_clean',
                                                  'operator': 'begins_with', 'value': 'checkout'},
                                                 {'field': 'method_clean',
                                                  'operator': 'ends_with', 'value': 'checkout'},
                                                 {'field': 'method_clean',
                                                  'operator': 'contains', 'value': 'checkout'},
                                                 {'field': 'ip_address',
                                                  'operator': 'is_not_null', 'value': None},
                                                 {'field': 'ip_isp', 'operator': 'is_not_empty', 'value': None}]}]},
                  'Rule3': {'condition': 'AND',
                            'rules': [{'field': 'method_clean',
                                       'operator': 'not_begins_with',
                                       'value': 'checkout'},
                                      {'field': 'method_clean',
                                       'operator': 'not_ends_with', 'value': 'checkout'},
                                      {'field': 'method_clean',
                                       'operator': 'not_contains', 'value': 'checkout'},
                                      {'condition': 'OR',
                                       'rules': [{'field': 'ip_address', 'operator': 'is_null', 'value': None},
                                                 {'field': 'ip_isp', 'operator': 'is_empty', 'value': None}]}]},
                  'Rule4': {'condition': 'AND',
                            'rules': [{'field': 'forwarder_address', 'operator': 'equal', 'value': True},
                                      {'field': 'is_shipping_billing_address_same',
                                       'operator': 'equal',
                                       'value': False}]},
                  'Rule5': {'condition': 'AND',
                            'rules': [{'field': 'ad_price_type',
                                       'operator': 'not_in',
                                       'value': ['FREE', 'NEGOTIATION']},
                                      {'field': 'ad_price_type', 'operator': 'in', 'value': ['FOO', 'BAR']}]},
                  'Rule6': {'condition': 'AND',
                            'rules': [{'field': 'ip_country_iso_code',
                                       'operator': 'equal_field',
                                       'value': 'billing_country'},
                                      {'field': 'country_id',
                                       'operator': 'not_equal_field',
                                       'value': 'ip_country_iso_code'},
                                      {'field': 'is_shipping_billing_address_same',
                                       'operator': 'is_null',
                                       'value': None}]}}
    field_datatypes = {
        'payer_id_sum_approved_txn_amt_per_paypalid_1day': 'DOUBLE',
        'payer_id_sum_approved_txn_amt_per_paypalid_7day': 'DOUBLE',
        'payer_id_sum_approved_txn_amt_per_paypalid_30day': 'DOUBLE',
        'num_items': 'INT',
        'ml_cc_v0': 'DOUBLE',
        'method_clean': 'TEXT',
        'method_clean': 'TEXT',
        'method_clean': 'TEXT',
        'method_clean': 'TEXT',
        'ip_address': 'TEXT',
        'ip_isp': 'TEXT',
        'method_clean': 'TEXT',
        'method_clean': 'TEXT',
        'method_clean': 'TEXT',
        'ip_address': 'TEXT',
        'ip_isp': 'TEXT',
        'forwarder_address': 'BOOLEAN',
        'is_shipping_billing_address_same': 'BOOLEAN',
        'ad_price_type': 'TEXT',
        'ad_price_type': 'TEXT',
        'ip_country_iso_code': 'TEXT',
        'country_id': 'TEXT',
        'billing_country': 'TEXT'
    }
    cassandra_field_names = {
        'payer_id_sum_approved_txn_amt_per_paypalid_1day': 'payer_id.sum_approved_txn_amt_per_paypalid_1day',
        'payer_id_sum_approved_txn_amt_per_paypalid_7day': 'payer_id.sum_approved_txn_amt_per_paypalid_7day',
        'payer_id_sum_approved_txn_amt_per_paypalid_30day': 'payer_id.sum_approved_txn_amt_per_paypalid_30day',
        'num_items': 'num_items',
        'ml_cc_v0': 'ml_cc_v0',
        'method_clean': 'method_clean',
        'method_clean': 'method_clean',
        'method_clean': 'method_clean',
        'method_clean': 'method_clean',
        'ip_address': 'ip_address',
        'ip_isp': 'ip_isp',
        'method_clean': 'method_clean',
        'method_clean': 'method_clean',
        'method_clean': 'method_clean',
        'ip_address': 'ip_address',
        'ip_isp': 'ip_isp',
        'forwarder_address': 'forwarder_address',
        'is_shipping_billing_address_same': 'is_shipping_billing_address_same',
        'ad_price_type': 'ad_price_type',
        'ad_price_type': 'ad_price_type',
        'ip_country_iso_code': 'ip_country_iso_code',
        'country_id': 'country_id',
        'billing_country': 'billing_country'
    }
    return rule_dicts, field_datatypes, cassandra_field_names


@pytest.fixture
def _system_rule_dicts():
    system_dicts = {'Rule1': {'condition': 'AND',
                              'rules': [{'condition': 'OR',
                                         'rules': [{'id': 'payer_id.sum_approved_txn_amt_per_paypalid_1day',
                                                    'field': 'payer_id.sum_approved_txn_amt_per_paypalid_1day',
                                                    'type': 'double',
                                                    'operator': 'greater_or_equal',
                                                    'value': 'value.60.0'},
                                                   {'id': 'payer_id.sum_approved_txn_amt_per_paypalid_7day',
                                                    'field': 'payer_id.sum_approved_txn_amt_per_paypalid_7day',
                                                    'type': 'double',
                                                    'operator': 'greater',
                                                    'value': 'value.120.0'},
                                                   {'id': 'payer_id.sum_approved_txn_amt_per_paypalid_30day',
                                                    'field': 'payer_id.sum_approved_txn_amt_per_paypalid_30day',
                                                    'type': 'double',
                                                    'operator': 'less_or_equal',
                                                    'value': 'value.500.0'}],
                                         },
                                        {'id': 'num_items',
                                         'field': 'num_items',
                                         'type': 'integer',
                                         'operator': 'equal',
                                         'value': 'value.1'},
                                        ]},
                    'Rule2': {'condition': 'AND',
                              'rules': [{'id': 'ml_cc_v0',
                                         'field': 'ml_cc_v0',
                                         'type': 'double',
                                         'operator': 'less',
                                         'value': 'value.0.315'},
                                        {'condition': 'OR',
                                         'rules': [{'id': 'method_clean',
                                                    'field': 'method_clean',
                                                    'type': 'string',
                                                    'operator': 'equal',
                                                    'value': 'value.checkout'},
                                                   {'id': 'method_clean',
                                                    'field': 'method_clean',
                                                    'type': 'string',
                                                    'operator': 'begins_with',
                                                    'value': 'value.checkout'},
                                                   {'id': 'method_clean',
                                                    'field': 'method_clean',
                                                    'type': 'string',
                                                    'operator': 'ends_with',
                                                    'value': 'value.checkout'},
                                                   {'id': 'method_clean',
                                                    'field': 'method_clean',
                                                    'type': 'string',
                                                    'operator': 'contains',
                                                    'value': 'value.checkout'},
                                                   {'id': 'ip_address',
                                                    'field': 'ip_address',
                                                    'type': 'string',
                                                    'operator': 'is_not_null',
                                                    'value': None},
                                                   {'id': 'ip_isp',
                                                    'field': 'ip_isp',
                                                    'type': 'string',
                                                    'operator': 'is_not_empty',
                                                    'value': None}
                                                   ]}]},
                    'Rule3': {'condition': 'AND',
                              'rules': [{'id': 'method_clean',
                                         'field': 'method_clean',
                                         'type': 'string',
                                         'operator': 'not_begins_with',
                                         'value': 'value.checkout'},
                                        {'id': 'method_clean',
                                         'field': 'method_clean',
                                         'type': 'string',
                                         'operator': 'not_ends_with',
                                         'value': 'value.checkout'},
                                        {'id': 'method_clean',
                                         'field': 'method_clean',
                                         'type': 'string',
                                         'operator': 'not_contains',
                                         'value': 'value.checkout'},
                                        {'condition': 'OR',
                                         'rules': [{'id': 'ip_address',
                                                    'field': 'ip_address',
                                                    'type': 'string',
                                                    'operator': 'is_null',
                                                    'value': None},
                                                   {'id': 'ip_isp',
                                                    'field': 'ip_isp',
                                                    'type': 'string',
                                                    'operator': 'is_empty',
                                                    'value': None},
                                                   ],
                                         }]},
                    'Rule4': {'condition': 'AND',
                              'rules': [{'id': 'forwarder_address',
                                         'field': 'forwarder_address',
                                         'type': 'boolean',
                                         'input': 'radio',
                                         'operator': 'equal',
                                         'value': '1'},
                                        {'id': 'is_shipping_billing_address_same',
                                         'field': 'is_shipping_billing_address_same',
                                         'type': 'boolean',
                                         'input': 'radio',
                                         'operator': 'equal',
                                         'value': '0'}]},
                    'Rule5': {'condition': 'AND',
                              'rules': [{'id': 'ad_price_type',
                                         'field': 'ad_price_type',
                                         'type': 'string',
                                         'operator': 'not_in',
                                         'value': 'value.FREE,NEGOTIATION'},
                                        {'id': 'ad_price_type',
                                         'field': 'ad_price_type',
                                         'type': 'string',
                                         'operator': 'in',
                                         'value': 'value.FOO,BAR'}
                                        ]},
                    'Rule6': {'condition': 'AND',
                              'rules': [{'id': 'ip_country_iso_code',
                                         'field': 'ip_country_iso_code',
                                         'type': 'string',
                                         'operator': 'equal',
                                         'value': 'field.billing_country',
                                         },
                                        {'id': 'country_id',
                                         'field': 'country_id',
                                         'type': 'string',
                                         'operator': 'not_equal',
                                         'value': 'field.ip_country_iso_code',
                                         },
                                        {'id': 'is_shipping_billing_address_same',
                                         'field': 'is_shipping_billing_address_same',
                                         'type': 'boolean',
                                         'input': 'radio',
                                         'operator': 'is_null',
                                         'value': None}]}}
    return system_dicts


@pytest.fixture
def _individual_conditions():
    argo_dict_conditions = [{'field': 'payer_id_sum_approved_txn_amt_per_paypalid_1day', 'operator': 'greater_or_equal', 'value': 60.0},
                            {'field': 'payer_id_sum_approved_txn_amt_per_paypalid_7day',
                             'operator': 'greater', 'value': 120.0},
                            {'field': 'payer_id_sum_approved_txn_amt_per_paypalid_30day',
                             'operator': 'less_or_equal', 'value': 500.0},
                            {'field': 'num_items', 'operator': 'equal', 'value': 1.0},
                            {'field': 'ml_cc_v0', 'operator': 'less', 'value': 0.315},
                            {'field': 'method_clean',
                                'operator': 'equal', 'value': 'checkout'},
                            {'field': 'method_clean',
                                'operator': 'begins_with', 'value': 'checkout'},
                            {'field': 'method_clean',
                                'operator': 'ends_with', 'value': 'checkout'},
                            {'field': 'method_clean',
                                'operator': 'contains', 'value': 'checkout'},
                            {'field': 'ip_address',
                                'operator': 'is_not_null', 'value': None},
                            {'field': 'ip_isp',
                                'operator': 'is_not_empty', 'value': None},
                            {'field': 'method_clean',
                                'operator': 'not_begins_with', 'value': 'checkout'},
                            {'field': 'method_clean',
                                'operator': 'not_ends_with', 'value': 'checkout'},
                            {'field': 'method_clean',
                                'operator': 'not_contains', 'value': 'checkout'},
                            {'field': 'ip_address',
                                'operator': 'is_null', 'value': None},
                            {'field': 'ip_isp', 'operator': 'is_empty', 'value': None},
                            {'field': 'forwarder_address',
                                'operator': 'equal', 'value': True},
                            {'field': 'is_shipping_billing_address_same',
                             'operator': 'equal', 'value': False},
                            {'field': 'ad_price_type', 'operator': 'not_in',
                             'value': ['FREE', 'NEGOTIATION']},
                            {'field': 'ad_price_type', 'operator': 'in',
                                'value': ['FOO', 'BAR']},
                            {'field': 'ip_country_iso_code',
                             'operator': 'equal_field', 'value': 'billing_country'},
                            {'field': 'country_id', 'operator': 'not_equal_field',
                                'value': 'ip_country_iso_code'},
                            {'field': 'is_shipping_billing_address_same', 'operator': 'is_null', 'value': None}]

    system_dict_conditions = [
        {'id': 'payer_id.sum_approved_txn_amt_per_paypalid_1day', 'field': 'payer_id.sum_approved_txn_amt_per_paypalid_1day',
            'type': 'double', 'operator': 'greater_or_equal', 'value': 'value.60.0'},
        {'id': 'payer_id.sum_approved_txn_amt_per_paypalid_7day', 'field': 'payer_id.sum_approved_txn_amt_per_paypalid_7day',
            'type': 'double', 'operator': 'greater', 'value': 'value.120.0'},
        {'id': 'payer_id.sum_approved_txn_amt_per_paypalid_30day', 'field': 'payer_id.sum_approved_txn_amt_per_paypalid_30day',
            'type': 'double', 'operator': 'less_or_equal', 'value': 'value.500.0'},
        {'id': 'num_items', 'field': 'num_items', 'type': 'integer',
            'operator': 'equal', 'value': 'value.1'},
        {'id': 'ml_cc_v0', 'field': 'ml_cc_v0', 'type': 'double',
            'operator': 'less', 'value': 'value.0.315'},
        {'id': 'method_clean', 'field': 'method_clean', 'type': 'string',
            'operator': 'equal', 'value': 'value.checkout'},
        {'id': 'method_clean', 'field': 'method_clean', 'type': 'string',
            'operator': 'begins_with', 'value': 'value.checkout'},
        {'id': 'method_clean', 'field': 'method_clean', 'type': 'string',
            'operator': 'ends_with', 'value': 'value.checkout'},
        {'id': 'method_clean', 'field': 'method_clean', 'type': 'string',
            'operator': 'contains', 'value': 'value.checkout'},
        {'id': 'ip_address', 'field': 'ip_address', 'type': 'string',
            'operator': 'is_not_null', 'value': None},
        {'id': 'ip_isp', 'field': 'ip_isp', 'type': 'string',
            'operator': 'is_not_empty', 'value': None},
        {'id': 'method_clean', 'field': 'method_clean', 'type': 'string',
            'operator': 'not_begins_with', 'value': 'value.checkout'},
        {'id': 'method_clean', 'field': 'method_clean', 'type': 'string',
            'operator': 'not_ends_with', 'value': 'value.checkout'},
        {'id': 'method_clean', 'field': 'method_clean', 'type': 'string',
            'operator': 'not_contains', 'value': 'value.checkout'},
        {'id': 'ip_address', 'field': 'ip_address',
            'type': 'string', 'operator': 'is_null', 'value': None},
        {'id': 'ip_isp', 'field': 'ip_isp', 'type': 'string',
            'operator': 'is_empty', 'value': None},
        {'id': 'forwarder_address', 'field': 'forwarder_address',
            'type': 'boolean', 'input': 'radio', 'operator': 'equal', 'value': '1'},
        {'id': 'is_shipping_billing_address_same', 'field': 'is_shipping_billing_address_same',
            'type': 'boolean', 'input': 'radio', 'operator': 'equal', 'value': '0'},
        {'id': 'ad_price_type', 'field': 'ad_price_type', 'type': 'string',
            'operator': 'not_in', 'value': 'value.FREE,NEGOTIATION'},
        {'id': 'ad_price_type', 'field': 'ad_price_type',
            'type': 'string', 'operator': 'in', 'value': 'value.FOO,BAR'},
        {'id': 'ip_country_iso_code', 'field': 'ip_country_iso_code',
            'type': 'string', 'operator': 'equal', 'value': 'field.billing_country'},
        {'id': 'country_id', 'field': 'country_id', 'type': 'string',
            'operator': 'not_equal', 'value': 'field.ip_country_iso_code'},
        {'id': 'is_shipping_billing_address_same', 'field': 'is_shipping_billing_address_same',
            'type': 'boolean', 'input': 'radio', 'operator': 'is_null', 'value': None},
    ]
    return argo_dict_conditions, system_dict_conditions


def test_convert(_data, _system_rule_dicts):
    rule_dicts, field_datatypes, cassandra_field_names = _data
    expected_system_rule_dicts = _system_rule_dicts
    tsp = ConvertRuleDictsToSystemDicts(
        rule_dicts=rule_dicts, field_datatypes=field_datatypes, cassandra_field_names=cassandra_field_names)
    system_rule_dicts = tsp.convert()
    assert system_rule_dicts == expected_system_rule_dicts


def test_convert_rule(_data, _system_rule_dicts):
    rule_dicts, field_datatypes, cassandra_field_names = _data
    expected_system_rule_dicts = _system_rule_dicts
    tsp = ConvertRuleDictsToSystemDicts(
        rule_dicts=rule_dicts, field_datatypes=field_datatypes, cassandra_field_names=cassandra_field_names)
    for rule_name, rule_dict in rule_dicts.items():
        system_rule_dicts = tsp._convert_rule(rule_dict=rule_dict)
        assert system_rule_dicts == expected_system_rule_dicts[rule_name]


def test_recurse_parse_conditions_dict(_data, _system_rule_dicts):
    rule_dicts, field_datatypes, cassandra_field_names = _data
    expected_system_rule_dicts = _system_rule_dicts
    rule_dict = rule_dicts['Rule1']
    expected_system_rule_dict = expected_system_rule_dicts['Rule1']
    tsp = ConvertRuleDictsToSystemDicts(rule_dicts={}, field_datatypes=field_datatypes,
                                        cassandra_field_names=cassandra_field_names)
    system_rule_dict = tsp._recurse_parse_conditions_dict(
        conditions_dict=rule_dict)
    assert system_rule_dict == expected_system_rule_dict


def test_parse_individual_condition(_individual_conditions, _data):
    argo_dict_conditions, system_dict_conditions = _individual_conditions
    _, field_datatypes, cassandra_field_names = _data
    sp = ConvertRuleDictsToSystemDicts(rule_dicts={}, field_datatypes=field_datatypes,
                                       cassandra_field_names=cassandra_field_names)
    for i, condition in enumerate(argo_dict_conditions):
        sp._parse_individual_condition(rule=condition)
        assert condition == system_dict_conditions[i]
