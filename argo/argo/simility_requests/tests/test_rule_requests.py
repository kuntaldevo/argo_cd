import pytest
from simility_requests.rule_requests import ReturnRuleInfoFromSimility, \
    ReturnRuleConditionsFromSimility, ReturnRuleConfigsFromSimility, \
    CreateRulesInSimility, UpdateRulesInSimility
import simility_apis.set_password
import httpretty
import json
import pandas as pd


@pytest.fixture
def _params_return_rule_info():
    params = {
        "url": 'http://sim-ds.us-central1.gcp.dev.paypalinc.com',
        "app_prefix": 'james_testing',
        'entity': 'transaction',
        "user": 'james@simility.com',
        'keep_active_only': False,
    }
    url = params['url']
    app_prefix = params['app_prefix']
    entity = params['entity']
    endpoint = f'{url}/server/rest/rule/list/{app_prefix}/{entity}'
    return params, endpoint


@pytest.fixture
def _instantiate_create_rules():
    params = {
        "url": 'http://sim-ds.us-central1.gcp.dev.paypalinc.com',
        "app_prefix": 'james_testing',
        "user": 'james@simility.com'
    }
    url = params['url']
    endpoint = f'{url}/server/rest/rule?runRule=false'
    api = CreateRulesInSimility(**params)
    return api, endpoint


@pytest.fixture
def _instantiate_update_rules():
    params = {
        "url": 'http://sim-ds.us-central1.gcp.dev.paypalinc.com',
        "app_prefix": 'james_testing',
        "user": 'james@simility.com'
    }
    url = params['url']
    rule_configs = {"Rule1": {"id": 123, "name": "test_rule"}}
    rule_id = rule_configs['Rule1']['id']
    endpoint = f'{url}/server/rest/rule/{rule_id}?runRule=false'
    api = UpdateRulesInSimility(**params)
    return api, endpoint, rule_configs


@pytest.fixture
def _response_body():
    body = '{"entries": [{"createdBy": "james@simility.com", "createdOn": "2020-10-06T10:22:54.420-07:00", "id": 1801, "modifiedBy": "james@simility.com", "modifiedOn": "2020-12-21T07:42:36.546-08:00", "appPrefix": "james_testing", "entityName": "transaction", "name": "CreateRuleTest1", "casesCaughtByRule": 0, "conditions": "{\\"condition\\": \\"AND\\", \\"rules\\": [{\\"field\\": \\"order_total\\", \\"operator\\": \\"greater_or_equal\\", \\"value\\": \\"value.100.0\\", \\"id\\": \\"order_total\\", \\"type\\": \\"double\\"}]}", "conditionsCleaned": "{\\"condition\\":\\"AND\\",\\"rules\\":[{\\"id\\":\\"order_total\\",\\"field\\":\\"order_total\\",\\"type\\":\\"double\\",\\"operator\\":\\"greater_or_equal\\",\\"value\\":\\"value.100.0\\"}]}", "conditionsJson": {"condition": "AND", "rules": [{"field": "order_total", "id": "order_total", "operator": "greater_or_equal", "type": "double", "value": "value.100.0"}]}, "conditionsV2": "{\\"operator\\":\\"AND\\",\\"rules\\":[{\\"operator\\":\\"GREATER_THAN_OR_EQUAL\\",\\"rules\\":[{\\"type\\":\\"DOUBLE\\",\\"operator\\":\\"TABLE_VALUE\\",\\"value\\":\\"order_total\\"},{\\"type\\":\\"DOUBLE\\",\\"operator\\":\\"CONSTANT\\",\\"value\\":\\"100.0\\"}]}]}", "conditionsV2Json": {"operator": "AND", "rules": [{"operator": "GREATER_THAN_OR_EQUAL", "rules": [{"operator": "TABLE_VALUE", "type": "DOUBLE", "value": "order_total"}, {"operator": "CONSTANT", "type": "DOUBLE", "value": 100}]}]}, "entitiesProcessed": 0, "isAutoGenerated": true, "javaElExpression": "", "lastDateRuleConditionChanged": "2020-12-21T07:42:36.548-08:00", "matches": 0, "query": "", "rid": 1801, "ruleGroupNames": "Test", "score": -50, "status": "ACTIVE", "totalCases": 0, "totalEntities": 0}]}'
    return body


@pytest.fixture
def _expected_rules_df_cols():
    expected_columns = [
        'appPrefix',
        'casesCaughtByRule',
        'conditions',
        'conditionsCleaned',
        'conditionsJson',
        'conditionsV2',
        'conditionsV2Json',
        'createdBy',
        'createdOn',
        'entitiesProcessed',
        'entityName',
        'id',
        'isAutoGenerated',
        'javaElExpression',
        'jsonConfig',
        'lastDateRuleConditionChanged',
        'matches',
        'modifiedBy',
        'modifiedOn',
        'query',
        'rid',
        'ruleGroupNames',
        'score',
        'status',
        'totalCases',
        'totalEntities'
    ]
    return expected_columns


class TestCreateRulesInSimility:

    @httpretty.activate
    def test_request(self, _instantiate_create_rules):
        simility_apis.set_password.PASSWORD = 'abc'
        api, endpoint = _instantiate_create_rules
        httpretty.enable()
        httpretty.register_uri(httpretty.POST, endpoint)
        response = api.request(rule_configs={"Rule1": {}})
        assert response == None
        httpretty.disable()

    @httpretty.activate
    def test_request_bad_connection(self, _instantiate_create_rules):
        simility_apis.set_password.PASSWORD = 'abc'
        api, endpoint = _instantiate_create_rules
        httpretty.enable()
        httpretty.register_uri(httpretty.POST, endpoint,
                               status=401)
        with pytest.warns(UserWarning) as w:
            api.request(rule_configs={"Rule1": {}})
            assert str(
                w[0].message) == 'Rule `Rule1` - The API request threw a <Response [401]> error.'
        httpretty.disable()

    def test_request_no_password_error(self, _instantiate_create_rules):
        del simility_apis.set_password.PASSWORD
        api, _ = _instantiate_create_rules
        with pytest.warns(UserWarning) as w:
            api.request(rule_configs={"Rule1": {}})
            assert str(
                w[0].message) == "Rule `Rule1` - module 'simility_apis.set_password' has no attribute 'PASSWORD'"


class TestUpdateRulesInSimility:

    @httpretty.activate
    def test_request(self, _instantiate_update_rules):
        simility_apis.set_password.PASSWORD = 'abc'
        api, endpoint, rule_configs = _instantiate_update_rules
        httpretty.enable()
        httpretty.register_uri(httpretty.PUT, endpoint)
        response = api.request(rule_configs=rule_configs)
        assert response == None
        httpretty.disable()

    @httpretty.activate
    def test_request_bad_connection(self, _instantiate_update_rules):
        simility_apis.set_password.PASSWORD = 'abc'
        api, endpoint, rule_configs = _instantiate_update_rules
        httpretty.enable()
        httpretty.register_uri(httpretty.PUT, endpoint,
                               status=401)
        with pytest.warns(UserWarning) as w:
            api.request(rule_configs=rule_configs)
            assert str(
                w[0].message) == 'Rule `Rule1` - The API request threw a <Response [401]> error.'
        httpretty.disable()

    def test_request_no_password_error(self, _instantiate_update_rules):
        del simility_apis.set_password.PASSWORD
        api, _, rule_configs = _instantiate_update_rules
        with pytest.warns(UserWarning) as w:
            api.request(rule_configs=rule_configs)
            assert str(
                w[0].message) == "Rule `Rule1` - module 'simility_apis.set_password' has no attribute 'PASSWORD'"


class TestReturnRuleInfoFromSimility:

    @httpretty.activate
    def test_request(self, _params_return_rule_info, _response_body,
                     _expected_rules_df_cols):
        simility_apis.set_password.PASSWORD = 'abc'
        params, endpoint = _params_return_rule_info
        api = ReturnRuleInfoFromSimility(**params)
        body = _response_body
        httpretty.enable()
        httpretty.register_uri(httpretty.GET, endpoint, body=body)
        rules_df = api.request()
        rules_df_cols = list(rules_df.columns)
        rules_df_cols.sort()
        expected_columns = _expected_rules_df_cols
        assert rules_df_cols == expected_columns
        httpretty.disable()

    @httpretty.activate
    def test_request_for_rules(self, _params_return_rule_info, _response_body):
        simility_apis.set_password.PASSWORD = 'abc'
        params, endpoint = _params_return_rule_info
        api = ReturnRuleInfoFromSimility(**params)
        body = _response_body
        httpretty.enable()
        httpretty.register_uri(httpretty.GET, endpoint, body=body)
        response = api._request_for_rules(
            url=params['url'], app_prefix=params['app_prefix'],
            entity=params['entity'], user=params['user'])
        response_json = json.loads(response.text)
        assert list(response_json.keys()) == ['entries']
        httpretty.disable()

    def test_convert_response_to_dataframe(self, _params_return_rule_info,
                                           _response_body, _expected_rules_df_cols):
        params, _ = _params_return_rule_info
        api = ReturnRuleInfoFromSimility(**params)
        body = _response_body
        rules_df = api._convert_response_to_dataframe(
            response=body, keep_active_only=False)
        rules_df_cols = list(rules_df.columns)
        rules_df_cols.sort()
        expected_columns = _expected_rules_df_cols
        assert rules_df_cols == expected_columns

    def test_convert_response_to_dataframe_error(self, _params_return_rule_info,
                                                 _expected_rules_df_cols):
        params, _ = _params_return_rule_info
        api = ReturnRuleInfoFromSimility(**params)
        body = {}
        with pytest.raises(Exception) as e:
            api._convert_response_to_dataframe(
                response=body, keep_active_only=False)
            assert e == 'ERROR: the system rules config is empty, which suggests that there are no rules present on the chosen entity.'


class TestReturnRuleConditionsFromSimility:

    @httpretty.activate
    def test_request(self, _params_return_rule_info, _response_body,
                     _expected_rules_df_cols):
        simility_apis.set_password.PASSWORD = 'abc'
        params, endpoint = _params_return_rule_info
        api = ReturnRuleConditionsFromSimility(**params)
        body = _response_body
        httpretty.enable()
        httpretty.register_uri(httpretty.GET, endpoint, body=body)
        rule_conditions = api.request()
        assert rule_conditions == {
            'CreateRuleTest1': {
                'condition': 'AND', 'rules': [
                    {
                        'field': 'order_total', 'operator': 'greater_or_equal', 'value': 'value.100.0', 'id': 'order_total', 'type': 'double'
                    }]}}
        httpretty.disable()


class TestReturnRuleConfigsFromSimility:

    @httpretty.activate
    def test_request(self, _params_return_rule_info, _response_body,
                     _expected_rules_df_cols):
        simility_apis.set_password.PASSWORD = 'abc'
        params, endpoint = _params_return_rule_info
        params.pop('keep_active_only')
        api = ReturnRuleConfigsFromSimility(**params)
        body = _response_body
        httpretty.enable()
        httpretty.register_uri(httpretty.GET, endpoint, body=body)
        rule_configs = api.request()
        assert rule_configs == {
            'CreateRuleTest1': {'createdBy': 'james@simility.com', 'createdOn': '2020-10-06T10:22:54.420-07:00',
                                'id': 1801, 'modifiedBy': 'james@simility.com', 'modifiedOn': '2020-12-21T07:42:36.546-08:00', 'appPrefix': 'james_testing', 'entityName': 'transaction', 'name': 'CreateRuleTest1', 'casesCaughtByRule': 0, 'conditions': '{"condition": "AND", "rules": [{"field": "order_total", "operator": "greater_or_equal", "value": "value.100.0", "id": "order_total", "type": "double"}]}', 'conditionsCleaned': '{"condition":"AND","rules":[{"id":"order_total","field":"order_total","type":"double","operator":"greater_or_equal","value":"value.100.0"}]}', 'conditionsJson': {'condition': 'AND', 'rules': [
                                    {'field': 'order_total', 'id': 'order_total', 'operator': 'greater_or_equal', 'type': 'double', 'value': 'value.100.0'}]}, 'conditionsV2': '{"operator":"AND","rules":[{"operator":"GREATER_THAN_OR_EQUAL","rules":[{"type":"DOUBLE","operator":"TABLE_VALUE","value":"order_total"},{"type":"DOUBLE","operator":"CONSTANT","value":"100.0"}]}]}', 'conditionsV2Json': {'operator': 'AND', 'rules': [{'operator': 'GREATER_THAN_OR_EQUAL', 'rules': [{'operator': 'TABLE_VALUE', 'type': 'DOUBLE', 'value': 'order_total'}, {'operator': 'CONSTANT', 'type': 'DOUBLE', 'value': 100}]}]}, 'entitiesProcessed': 0, 'isAutoGenerated': True, 'javaElExpression': '', 'lastDateRuleConditionChanged': '2020-12-21T07:42:36.548-08:00', 'matches': 0, 'query': '', 'rid': 1801, 'ruleGroupNames': 'Test', 'score': -50, 'status': 'ACTIVE', 'totalCases': 0, 'totalEntities': 0}
        }
        httpretty.disable()
