{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ARGO Example"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This notebook contains an example of how the ARGO package can be used to:\n",
    "\n",
    "* Generate new rules\n",
    "* Optimise existing rules\n",
    "* Combine these rules and remove those which are unnecessary\n",
    "* Generate rule score\n",
    "* Test final rule set and scores on test data\n",
    "* Generate/update the system-ready configs of the final rule set\n",
    "* Update the Simility environment with the final rule set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To run, you'll need the following:\n",
    "\n",
    "* Install the ARGO package - see the readme for more information.\n",
    "* A raw, labelled dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Table of contents\n",
    "\n",
    "1. [Read/process data](#ReadProcessData)\n",
    "2. [Rule generation](#RuleGeneration)\n",
    "3. [Rule Optimisation](#RuleOptimisation)\n",
    "4. [Combine rules and remove those which are unnecessary](#CombineRules)\n",
    "5. [Score rules](#ScoreRules)\n",
    "6. [Remove filtered rules from rule set](#RemoveFiltered)\n",
    "7. [Test final rule set and scores on test data](#TestFinal)\n",
    "8. [Convert generated rule conditions to system-ready](#ConvertGenToSys)\n",
    "9. [Generate/update the system-ready configs of the rules](#GenUpdateSysConfigs)\n",
    "10. [Update the Simility environment with the final rule set](#UpdateSimility)\t"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "----"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from simility_apis.set_password import set_password\n",
    "from argo.read_data import DataReader\n",
    "from argo.simility_requests import ReturnCassandraDatatypes, ReturnPipelineOutputDatatypes, ReturnCassandraPipelineOutputMapping, \\\n",
    "    ReturnRuleConditionsFromSimility, ReturnRuleConfigsFromSimility, CreateRulesInSimility, UpdateRulesInSimility\n",
    "from argo.rule_generation import RuleGeneratorDT, RuleGeneratorOpt\n",
    "from argo.rule_optimisation import RuleOptimiser, FScore, Precision\n",
    "from argo.rules import Rules, ConvertProcessedConditionsToGeneral, ReturnMappings\n",
    "from argo.correlation_reduction import AgglomerativeClusteringFeatureReduction, JaccardSimilarity\n",
    "from argo.rule_filtering import FilterRules, GreedyFilter, FilterCorrelatedRules\n",
    "from argo.rule_scoring import LogRegScorer, PerformanceScorer, ConstantScaler, MinMaxScaler, RuleScorer\n",
    "from argo.system_config_generation import CreateNewConfigs, UpdateExistingConfigs\n",
    "from argo.rule_application import ArgoRuleApplier, SimRuleApplier\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from category_encoders.one_hot import OneHotEncoder\n",
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read/process data <a name=\"ReadProcessData\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Read in data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: If using the in-built APIs in ARGO to generate or update rules in the system, it's important that the datatypes used in the data align to the Cassandra datatypes in the system. For this, use the *read_data* module (not that if this isn't required, you can use Panda's standard reading methods).\n",
    "\n",
    "First, you need to set the password you use to log in to the Simility environment:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please provide your password for logging into the Simility platform:  ·········\n"
     ]
    }
   ],
   "source": [
    "set_password()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's define some credential-related variables (as these are used in multiple classes throughout the example):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'http://sim-ds.us-central1.gcp.dev.paypalinc.com'\n",
    "app_prefix = 'james_testing'\n",
    "user = 'james@simility.com'\n",
    "base_entity = 'transaction'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can use the *DataReader* class from the *read_data* module to read in the raw, labelled dummy pipeline output data (stored as a CSV file). **Note that the CSV should not contain duplicate records**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "dr = DataReader(url=url,\n",
    "                app_prefix=app_prefix,\n",
    "                user=user,\n",
    "                base_entity=base_entity)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = dr.read_csv(filepath='dummy_data/dummy_pipeline_output_data.csv',\n",
    "                   index_col='eid')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(13276, 64)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we can split the data into features (*X*) and the target column (*y*):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "fraud_column = 'sim_is_fraud'\n",
    "X = data.drop(fraud_column, axis=1)\n",
    "y = data[fraud_column]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Process the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Train/test split"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before applying any data processing steps, we should split the data into training and test sets:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Process data for rule generation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When generating new rules, we need to first process the data. The main data processesing steps that need to be applied before using the rule generator are:\n",
    "\n",
    "* Remove uneccessary columns\n",
    "* Impute null values\n",
    "* One hot encode categorical features\n",
    "* Feature selection ***(in this case, the feature set is small, so this step is omitted from the example)***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Remove uneccessary columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We need to remove those columns which will not be useful or make sense to have in our rules - in this case, any 'sim', 'eid' or high cardinality columns. Note however that there may be additional columns that you have to remove from your dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "sim_cols = X_train.filter(regex='sim_').columns.tolist()\n",
    "eid_cols = X_train.filter(regex='eid').columns.tolist()\n",
    "high_card_cols = X_train.select_dtypes(include='object').columns[(X_train.select_dtypes(include='object').nunique() > 50)].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = X_train.drop(sim_cols + eid_cols + high_card_cols, axis=1)\n",
    "X_test = X_test.drop(sim_cols + eid_cols + high_card_cols, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((8894, 27), (4382, 27))"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Impute null values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now impute the null values. You can use any imputation method you like - here we'll impute using the following methodology:\n",
    "\n",
    "* Impute numeric values with -1.\n",
    "* Impute categorical features with the category 'missing'.\n",
    "* Impute boolean features with 'missing'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of null values in X_train: 4766\n"
     ]
    }
   ],
   "source": [
    "print(\"Number of null values in X_train:\", X_train.isna().sum().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_cols = X_train.select_dtypes(include=np.number).columns.tolist()\n",
    "cat_cols = X_train.select_dtypes(include=object).columns.tolist()\n",
    "bool_cols = X_train.select_dtypes(include=bool).columns.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train[bool_cols] = X_train[bool_cols].astype(object)\n",
    "X_test[bool_cols] = X_test[bool_cols].astype(object)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train.loc[:, num_cols] = X_train.loc[:, num_cols].fillna(-1)\n",
    "X_train.loc[:, cat_cols] = X_train.loc[:, cat_cols].fillna('missing')\n",
    "X_train.loc[:, bool_cols] = X_train.loc[:, bool_cols].fillna('missing')\n",
    "X_test.loc[:, num_cols] = X_test.loc[:, num_cols].fillna(-1)\n",
    "X_test.loc[:, cat_cols] = X_test.loc[:, cat_cols].fillna('missing')\n",
    "X_test.loc[:, bool_cols] = X_test.loc[:, bool_cols].fillna('missing')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of null values in X_train: 0\n"
     ]
    }
   ],
   "source": [
    "print(\"Number of null values in X_train:\", X_train.isna().sum().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### One hot encode categorical features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can one hot encode the categorical features:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "ohe = OneHotEncoder(use_cat_names=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jlaidler/venvs/argo_test/lib/python3.7/site-packages/category_encoders/utils.py:21: FutureWarning: is_categorical is deprecated and will be removed in a future version.  Use is_categorical_dtype instead\n",
      "  elif pd.api.types.is_categorical(cols):\n"
     ]
    }
   ],
   "source": [
    "ohe.fit(X_train)\n",
    "X_train = ohe.transform(X_train)\n",
    "X_test = ohe.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((8894, 33), (4382, 33))"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Rule generation <a name=\"RuleGeneration\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we've processed our raw data, we can use this to generate rules. There are two rule generator algorithms in ARGO:\n",
    "\n",
    "* **RuleGeneratorDT**: Generate rules by extracting the highest performing branches from a tree ensemble model.\n",
    "* **RuleGeneratorOpt**: Generate rules by optimising the thresholds of single features and combining these one condition rules with AND conditions to create more complex rules.\n",
    "\n",
    "**Usually you'll just need to use one of these algorithms to generate rules. However, both have been shown below for completeness:**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Setting rule optimisation function"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For both rule generators, you'll need to specify the optimisation function (which calculates a metric which the algorithms optimise for each rule). Any function that has *y_true*, *y_pred* and *sample_weight* as an input can be used (e.g. *precision_score* from *sklearn.metrics*). However, the most common functions have already been defined in the *rule_optimisation.optimisation_functions* module. **Note that these functions perform ~100 times faster that their Sklearn counterparts**. \n",
    "\n",
    "Here, we'll use the *FScore* class from *rule_optimisation.optimisation_functions*:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "f1 = FScore(beta=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### RuleGeneratorOpt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can generate a set of rules using the RuleGeneratorOpt class. See the class docstring for more information on the parameters:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "rg_opt = RuleGeneratorOpt(opt_func=f1.fit, \n",
    "                          n_total_conditions=4, \n",
    "                          num_rules_keep=10,\n",
    "                          n_points=10,\n",
    "                          ratio_window=2,\n",
    "                          remove_corr_rules=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_rules_gen_train = rg_opt.fit(X=X_train, y=y_train.astype(int))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8894, 19)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_rules_gen_train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### RuleGeneratorDT"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can generate a set of rules using the RuleGeneratorDT class. See the class docstring for more information on the parameters:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "rg_dt = RuleGeneratorDT(opt_func=f1.fit, \n",
    "                        n_total_conditions=4, \n",
    "                        tree_ensemble=RandomForestClassifier(n_estimators=100, random_state=0),\n",
    "                        precision_threshold=0, \n",
    "                        num_cores=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_rules_gen_train = rg_dt.fit(X=X_train, y=y_train.astype(int))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8894, 356)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_rules_gen_train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The *.fit()* method returns a dataframe giving the binary columns of the generated rules as applied to the training dataset.\n",
    "\n",
    "Useful attributes created by running the *.fit()* method are:\n",
    "\n",
    "* rule_descriptions: A dataframe showing the logic of the generated rules and their performance metrics as applied to the training dataset.\n",
    "* rules: Class containing the rules stored in the standard ARGO string format. Methods from this class can be used to convert the rules into the standard ARGO dictionary or lambda expression representations. See the *rules* module for more information."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Apply rules to a separate dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the *.apply()* method to apply the generated rules to a separate dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_rules_applied = rg_dt.apply(X=X_test, y=y_test, sample_weight=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The *.apply()* method returns a dataframe giving the binary columns of the rules as applied to the given dataset.\n",
    "\n",
    "A useful attribute created by running the *.apply()* method is:\n",
    "\n",
    "* rule_descriptions_applied: A dataframe showing the logic of the generated rules and their performance metrics as applied to the given dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "----"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Rule Optimisation <a name=\"RuleOptimisation\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can optimise rules which currently reside in the Simility environment. This process involves the following steps:\n",
    "\n",
    "1. Fetch the system rule conditions from the Simility environment.\n",
    "2. Convert these conditions into an ARGO-readable format.\n",
    "3. Optimise the thresholds of these rules.\n",
    "4. Visualise the performance uplift.\n",
    "5. Apply the optimised rules to the dataset.\n",
    "6. Get the binary columns for the un-optimised rules"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Fetch the rule conditions from the Simility environment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To pull the system rule conditions, we'll use the *return_rule_conditions_from_simility* module in the *simility_requests* sub-package:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "rrc = ReturnRuleConditionsFromSimility(url=url,\n",
    "                                       app_prefix=app_prefix,\n",
    "                                       user=user,\n",
    "                                       entity=base_entity, \n",
    "                                       keep_active_only=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "orig_sys_conditions = rrc.request()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The *.request()* method returns a dictionary of the system rule names (keys) and their conditions (values)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Convert rule conditions into an ARGO-readable format"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have the system rule conditions, we need to convert them to an ARGO-readable format. To do this, we'll use the *rules* module - this module allows us to define a set of rules using a given format, then convert this rule set to a difference format. In this case, we'll be converting from the system-ready format to the standard ARGO lambda expression format.\n",
    "\n",
    "The standard ARGO lambda expression format allows new values to be injected into the condition string of a rule. This means that the rule's performance can be evaluated with new values (which is used in the Rule Optimisation step)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "system_rules = Rules(system_dicts=orig_sys_conditions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jlaidler/venvs/argo_test/lib/python3.7/site-packages/rules/convert_system_dicts_to_rule_dicts.py:79: UserWarning: JavaEL : Operator `java_el` is not currently supported in ARGO. Rule cannot be parsed.\n",
      "  warnings.warn(f'{rule_name} : {e}')\n"
     ]
    }
   ],
   "source": [
    "system_lambdas = system_rules.as_rule_lambdas(as_numpy=False, with_kwargs=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note that there may be rules which could not be converted into the standard ARGO lambda expression format, as they contain unsupported operators. The list of rule names that could not be converted are stored in the class attribute *unparsed_rules*:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['JavaEL']"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "system_rules.unparsed_rules"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The *.as_rule_lambdas()* method returns a dictionary of the set of rules defined using the standard ARGO lambda expression format (values) and their names (keys). It also saves this dictionary as the class attribute *rule_lambdas*.\n",
    "\n",
    "Three useful attributes created by running the *.as_rule_lambdas()* method are:\n",
    "\n",
    "- lambda_kwargs (dict): For each rule (keys), a dictionary containing the features used in the rule (keys) and the current values (values). **Only populates when .as_rule_lambdas() is used with the keyword argument with_kwargs=True.**\n",
    "- lambda_args (dict): For each rule (keys), a list containing the current values used in the rule. **Only populates when .as_rule_lambdas() is used with the keyword argument with_kwargs=False.**\n",
    "- rule_features (dict): For each rule (keys), a list containing the features used in the rule. **Only populates when .as_rule_lambdas() is used with the keyword argument with_kwargs=False.**\n",
    "- unparsed_rules (list): List of rules which could not be parsed to an ARGO-ready format (due to unsupported operators)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Optimise the thresholds of these rules"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note that rules containing a high number of *contains* operators can take longer to optimise.**\n",
    "\n",
    "Now that we have the system rules stored in the standard ARGO lambda expression format, we can feed these into the Rule Optimiser to optimise their thresholds:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "system_opt = RuleOptimiser(rule_lambdas=system_lambdas,\n",
    "                           lambda_kwargs=system_rules.lambda_kwargs,\n",
    "                           opt_func=f1.fit,\n",
    "                           n_iter=30)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note that for the feature set, we use the original, raw dataset - this is so the rules are applied to the same data as in the Simility system (e.g. if the rule conditions check for nulls, we need to have nulls present in the dataset):**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100%|██████████| 30/30 [00:00<00:00, 100.92trial/s, best loss: -0.9665271966527197] \n",
      "100%|██████████| 30/30 [00:00<00:00, 204.59trial/s, best loss: -0.39690721649484534]\n",
      "100%|██████████| 30/30 [00:00<00:00, 106.80trial/s, best loss: -0.765]             \n",
      "100%|██████████| 30/30 [00:00<00:00, 214.59trial/s, best loss: -0.9959349593495934]\n",
      "100%|██████████| 30/30 [00:00<00:00, 160.80trial/s, best loss: -0.5373134328358209]\n",
      "100%|██████████| 30/30 [00:00<00:00, 130.78trial/s, best loss: -0.3836477987421383]\n",
      "100%|██████████| 30/30 [00:00<00:00, 177.49trial/s, best loss: -0.3389830508474576]\n",
      "100%|██████████| 30/30 [00:00<00:00, 120.16trial/s, best loss: -0.032128514056224904]\n",
      "100%|██████████| 30/30 [00:00<00:00, 115.96trial/s, best loss: -0.7197943444730077]\n",
      "100%|██████████| 30/30 [00:00<00:00, 130.97trial/s, best loss: -0.1879194630872483] \n",
      "100%|██████████| 30/30 [00:00<00:00, 108.94trial/s, best loss: -0.9740518962075848] \n",
      "100%|██████████| 30/30 [00:00<00:00, 80.36trial/s, best loss: -0.367816091954023]   \n",
      "100%|██████████| 30/30 [00:00<00:00, 95.81trial/s, best loss: -0.9798387096774194] \n",
      "100%|██████████| 30/30 [00:00<00:00, 118.17trial/s, best loss: -0.40645161290322573]\n",
      "100%|██████████| 30/30 [00:00<00:00, 131.40trial/s, best loss: -0.3032258064516129]  \n",
      "100%|██████████| 30/30 [00:00<00:00, 101.57trial/s, best loss: -0.2926829268292683]\n",
      "100%|██████████| 30/30 [00:00<00:00, 135.43trial/s, best loss: -0.4954128440366973] \n",
      "100%|██████████| 30/30 [00:00<00:00, 108.28trial/s, best loss: -0.9798387096774194] \n",
      "100%|██████████| 30/30 [00:00<00:00, 99.40trial/s, best loss: -0.7722772277227724] \n",
      "100%|██████████| 30/30 [00:00<00:00, 66.61trial/s, best loss: -0.3197586726998492] \n"
     ]
    }
   ],
   "source": [
    "opt_rule_strings = system_opt.fit(X=X.loc[X_train.index], y=y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The *.fit()* method returns a dictionary of optimised rules stored in the standard ARGO string format (values) and their names (keys)\n",
    "\n",
    "Useful attributes created by running the *.fit()* method are:\n",
    "\n",
    "* opt_rule_strings (dict): The optimised rules stored in the standard ARGO string format (values) and their names (keys).    \n",
    "* rule_names_missing_features (list): Names of rules which use features that are not present in the dataset (and therefore can't be optimised or applied).\n",
    "* rule_names_no_opt_conditions (list): Names of rules which have no optimisable conditions (e.g. rules that only contain string-based conditions).\n",
    "* rule_names_zero_var_features (list): Names of rules which exclusively contain zero variance features (based on *X*), so cannot be optimised.\n",
    "* rules (object): Class containing the optimised rules stored in the standard ARGO string format. Methods from this class can be used to convert the rules into the standard ARGO dictionary or lambda expression representations. See the rules module for more information.\n",
    "* opt_rule_performances (dict): The optimisation metric (values) calculated for each optimised rule (keys).\n",
    "* orig_rule_performances (dict): The optimisation metric (values) calculated for each original rule (keys)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. Visualise the performance uplift"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can visualise the performance uplift of the optimised rules using the *.plot_performance_uplift()* and *.plot_performance_uplift_distribution()* methods:\n",
    "\n",
    "* *.plot_performance_uplift()*: Generates a scatterplot showing the performance of each rule before and after optimisation.\n",
    "* *.plot_performance_uplift_distribution()*: Generates a boxplot showing the distribution of performance uplifts (original rules vs optimised rules)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### On the training set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To visualise the uplift on the training set, we can use the class attributes *orig_rule_performances* and *opt_rule_performances* in the plotting methods, as these were generated as part of the optimisation process:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "system_opt.plot_performance_uplift(orig_rule_performances=system_opt.orig_rule_performances,\n",
    "                                   opt_rule_performances=system_opt.opt_rule_performances,\n",
    "                                   figsize=(10, 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 216x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "system_opt.plot_performance_uplift_distribution(orig_rule_performances=system_opt.orig_rule_performances,\n",
    "                                                opt_rule_performances=system_opt.opt_rule_performances,\n",
    "                                                figsize=(3, 7))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### On the test set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To visualise the uplift on the test set, we first need to generate the *orig_rule_performances* and *opt_rule_performances* parameters used in the plotting methods as these aren't created as part of the optimisation process. To do this, we need to apply both the original rules and the optimised rules to the test set. **Note that before we apply the original rules, we need to remove those containing features that are missing in *X_train*:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jlaidler/venvs/argo_test/lib/python3.7/site-packages/rules/convert_system_dicts_to_rule_dicts.py:79: UserWarning: JavaEL : Operator `java_el` is not currently supported in ARGO. Rule cannot be parsed.\n",
      "  warnings.warn(f'{rule_name} : {e}')\n"
     ]
    }
   ],
   "source": [
    "# Original rules\n",
    "system_rules.filter_rules(exclude=system_opt.rule_names_missing_features)\n",
    "orig_sys_rule_strings = system_rules.as_rule_strings(as_numpy=False)\n",
    "orig_ra = ArgoRuleApplier(rule_strings=orig_sys_rule_strings, \n",
    "                          opt_func=f1.fit)\n",
    "_ = orig_ra.apply(X=X.loc[X_test.index], y=y_test)\n",
    "orig_rule_performances_test = orig_ra.rule_descriptions['OptMetric']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Optimised rules\n",
    "opt_ra = ArgoRuleApplier(rule_strings=opt_rule_strings, \n",
    "                         opt_func=f1.fit)\n",
    "_ = opt_ra.apply(X=X.loc[X_test.index], y=y_test)\n",
    "opt_rule_performances_test = opt_ra.rule_descriptions['OptMetric']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "system_opt.plot_performance_uplift(orig_rule_performances=orig_rule_performances_test,\n",
    "                                   opt_rule_performances=opt_rule_performances_test,\n",
    "                                   figsize=(10, 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 216x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "system_opt.plot_performance_uplift_distribution(orig_rule_performances=orig_rule_performances_test,\n",
    "                                                opt_rule_performances=opt_rule_performances_test,\n",
    "                                                figsize=(3, 7))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5. Apply the optimised rules to the dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have the optimised rules, we can apply them to the dataset so we can score them later:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_rules_opt_sys_train = system_opt.apply(X=X.loc[X_train.index], y=y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The *.apply()* method returns a dataframe giving the binary columns of the rules as applied to the given dataset.\n",
    "\n",
    "A useful attribute created by running the *.apply()* method is:\n",
    "\n",
    "* rule_descriptions: A dataframe showing the logic of the optimised rules and their performance metrics as applied to the given dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6. Get the binary columns for the un-optimised rules"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the rules which either:\n",
    "\n",
    "1. ARGO couldn't convert into the standard ARGO lambda expression format, or; \n",
    "2. ARGO couldn't apply to the dataset due to missing features\n",
    "\n",
    "we can use the *SimRuleApplier* class from the *rule_application* sub-package to apply these rules to a dataset and get their performance, using the *sim_ll* column. \n",
    "\n",
    "**Note that we need to apply the rules to the original dataset (since the training/test sets don't have the *sim_ll* column), so we just use the X_train index to filter the original dataset to only contain those records before applying the rules:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "rules_cannot_be_applied = system_rules.unparsed_rules + system_opt.rule_names_missing_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "sra = SimRuleApplier(opt_func=f1.fit, sim_ll_column='sim_ll', rules=rules_cannot_be_applied)\n",
    "X_rules_unopt_sys_train = sra.apply(X=X.loc[X_train.index], y=y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The *.apply()* method returns a dataframe giving the binary columns of the rules as applied to the given dataset.\n",
    "\n",
    "A useful attribute created by running the *.apply()* method is:\n",
    "\n",
    "* rule_descriptions: A dataframe showing the logic of the rules and their performance metrics as applied to the given dataset.\n",
    "* rules_not_in_sim_ll: List of rule names that were provided in the *rules* class constructor parameter but could not be found in the *sim_ll* column."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Combine rules and remove those which are unnecessary <a name=\"CombineRules\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now have three sets of rules:\n",
    "\n",
    "1. Newly generated rules\n",
    "2. Optimised system rules\n",
    "3. Unoptimised system rules\n",
    "\n",
    "We can combine these rules, then apply correlation reduction and filtering methods to remove those which are unneccesary. To do this, we'll use the binary columns and the performance dataframes of the rules."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Combine binary columns and performance dataframes of rules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_rules_train = pd.concat([X_rules_gen_train, X_rules_opt_sys_train, X_rules_unopt_sys_train], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "rule_descriptions_train = pd.concat([rg_dt.rule_descriptions, system_opt.rule_descriptions, sra.rule_descriptions], axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Standard filter"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use the *FilterRules* class from the *rule_filters* module to filter out rules whose performance is below a desired threshold. In this example, we'll filter out rules with an F1 score below 0.05. Let's first set up our filters - **note that we use the key 'OptMetric' for the F1 score (since this is the metric that we used to generate and optimise the rules):**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "filters = {\n",
    "    'OptMetric': {\n",
    "        'Operator': '>=',\n",
    "        'Value': 0.05\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can instantiate the *FilterRules* class and run the *fit_transform()* method to remove the rules which do not meet the filter requirements and apply the filtered rule set to the dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "fr = FilterRules(filters=filters, rule_descriptions=rule_descriptions_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_rules_train = fr.fit_transform(X_rules=X_rules_train, y=y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The *.fit_transform()* method returns a dataframe containing the filtered rule binary columns. It also creates the following useful attributes:\n",
    "\n",
    "- rules_to_keep (list): List of rules which remain after the filters have been applied.\n",
    "- rule_descriptions (pd.DataFrame): The standard performance metrics dataframe associated with the filtered rules.\n",
    "\n",
    "We can assign the *rule_descriptions* dataframe from the class to our variable, ensuring that the filtered rules are removed from the dataframe:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "rule_descriptions_train = fr.rule_descriptions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((8894, 286), (286, 6))"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_rules_train.shape, rule_descriptions_train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Remove correlated rules"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use the *FilterCorrelatedRules* class from the *rule_filters* module along with a correlation reduction class to remove correlated rules - see the *correlation_reduction_methods* module in the *correlation_reduction* sub-package for more information on these classes. \n",
    "\n",
    "In this example, we'll be using the *AgglomerativeClusteringFeatureReduction* class from that module. To instantiate this class, we also need to define a similarity function - see the *similarity_functions* module in the *correlation_reduction* sub-package for more information. In this example, we'll use the Jaccard similarity:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "js = JaccardSimilarity()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "acfr = AgglomerativeClusteringFeatureReduction(threshold=0.5,\n",
    "                                               strategy='bottom_up', \n",
    "                                               similarity_function=js.fit, \n",
    "                                               columns_performance=rule_descriptions_train['OptMetric'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can instantiate the *FilterCorrelatedRules* class, and run the *fit_transform()* method to remove correlated rules and apply the filtered rule set to the dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "fcr = FilterCorrelatedRules(correlation_reduction_class=acfr, \n",
    "                            rule_descriptions=rule_descriptions_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_rules_train = fcr.fit_transform(X_rules=X_rules_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The *.fit_transform()* method returns a dataframe containing the binary columns of the uncorrelated rules. It also creates the following useful attributes:\n",
    "\n",
    "- rules_to_keep (list): List of rules which remain after the correlation reduction has been applied.\n",
    "- rule_descriptions (pd.DataFrame): The standard performance metrics dataframe associated with the uncorrelated rules.\n",
    "\n",
    "We can assign the *rule_descriptions* dataframe from the class to our variable, ensuring that the correlated rules are removed from the dataframe:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "rule_descriptions_train = fcr.rule_descriptions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((8894, 49), (49, 6))"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_rules_train.shape, rule_descriptions_train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Greedy filter"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use the *GreedyFilter* class from the *rule_filters* module to sort the rules by a given metric (e.g. precision), then iterate through the rules and calculate the combined performance of the top n number of rules. Here, we'll sort the rules by precision, then calculate the F1 score of the top n combined rules:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "gf = GreedyFilter(opt_func=f1.fit, \n",
    "                  rule_descriptions=rule_descriptions_train, \n",
    "                  sorting_col='Precision', \n",
    "                  show_plots=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_rules_train = gf.fit_transform(X_rules=X_rules_train, y=y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As can be seen from the second graph, when the rules are sorted by precision, then the F1 score is calculate for the top n combined rules, the combined performance begins to plateau/drop. So the algorithm will only keep those rules that deliver the maximum combined performance (and drop the rest)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The *.fit_transform()* method returns a dataframe containing the filtered rule binary columns. It also creates the following useful attributes:\n",
    "\n",
    "- rules_to_keep (list): List of rules which remain after the filters have been applied.\n",
    "- rule_descriptions (pd.DataFrame): The standard performance metrics dataframe associated with the filtered rules.\n",
    "\n",
    "We can assign the *rule_descriptions* dataframe from the class to our variable, ensuring that the filtered rules are removed from the dataframe:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "rule_descriptions_train = gf.rule_descriptions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((8894, 19), (19, 6))"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_rules_train.shape, rule_descriptions_train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Score rules <a name=\"ScoreRules\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have a clean, filtered rule set, we can generate scores for each rule. \n",
    "\n",
    "There are two algorithms for generating rule scores:\n",
    "\n",
    "* **LogRegScorer**: Generates rule scores from the exponentiated coefficients of a trained Logistic Regression model.\n",
    "* **PerformanceScorer**: Generates rule scores from a performance function. **Choose this method if working with large (>1million records) datasets and fast runtimes are required**\n",
    "\n",
    "There are also two rule score scaling methods:\n",
    "\n",
    "* **ConstantScaler**: Scales rule scores using the formula (depending on the sign of the rule scores):\n",
    "    * For negative scores: `x_scaled = (limit / x_min) * x`\n",
    "    * For positive scores: `x_scaled = (limit / x_max) * x`\n",
    "* **MinMaxScaler**: Scales rule scores using the formula:\n",
    "    * x_scaled = `(x - x_min) / (x_max - x_min)`\n",
    "    \n",
    "To generate rule scores, we first instantiate the rule scorer and score scaler classes. In this example, we'll use the *PerformanceScorer* and *ConstantScalar* classes. Note that the performance metric we'll be using with the *PerformanceScorer* is the F1 score:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "scorer = PerformanceScorer(performance_func=f1.fit)\n",
    "scaler = ConstantScaler(limit=-100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can instantiate the *RuleScorer* class and run the *.fit()* method to generate the rule scores:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "rs = RuleScorer(scoring_class=scorer, scaling_class=scaler)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_scores = rs.fit_transform(X_rules=X_rules_train, y=y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The *.fit_transform()* method returns a dataframe containing the generated scores applied to the dataset (i.e. replaces the 1 in X_rules with the generated score). It also creates the following useful attribute:\n",
    "\n",
    "- rule_scores (dict): Contains the generated score (values) for each rule (keys)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Remove filtered rules from rule set <a name=\"RemoveFiltered\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have our final rule set, we can remove the filtered rules from each of our rule set (which are saved in the *rules* attribute in our rule generator and rule optimiser classes):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_rule_names = X_rules_train.columns.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "rg_dt.rules.filter_rules(include=final_rule_names)\n",
    "system_opt.rules.filter_rules(include=final_rule_names)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We also need to remove the filtered rules from the original list of unparsed rules. To do this, we'll use a simple list comprehension:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_rules_cannot_be_applied = [rule_name for rule_name in rules_cannot_be_applied if rule_name in final_rule_names]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(13, 5, 1)"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(rg_dt.rules.rule_strings), len(system_opt.rules.rule_strings), len(final_rules_cannot_be_applied)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test final rule set and scores on test data <a name=\"TestFinal\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have our final rule set and scores, we can apply these to the test set to ensure they perform as expected."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Apply rules"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we apply the rules themselves. Since we have a combination of generated, optimised and unparsed rules, we need to apply them separately."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Generated rules"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We apply the rules by using the *rule_strings* attribute (which correponds to the generated rules stored in the standard ARGO-string format) from the rule generator class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "ara_gen = ArgoRuleApplier(rule_strings=rg_dt.rules.rule_strings, opt_func=f1.fit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_rules_gen_test = ara_gen.apply(X=X_test, y=y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Optimised rules"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again, we apply the rules by using the *rule_strings* attribute (which correponds to the optimised rules stored in the standard ARGO-string format) from the rule optimiser class. However, in this case we need to use the original, raw dataset (since the optimised rules are system rules which are applied to unprocessed data):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "ara_opt = ArgoRuleApplier(rule_strings=system_opt.rules.rule_strings, opt_func=f1.fit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_rules_opt_test = ara_opt.apply(X=X.loc[X_test.index], y=y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Unoptimised rules "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this case, we pass the list of final unparsed rules to the *SimRuleApplier* class, and apply it to the original, raw dataset (as this dataset contains the *sim_ll* column which is required):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "sra = SimRuleApplier(opt_func=f1.fit, sim_ll_column='sim_ll', rules=final_rules_cannot_be_applied)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_rules_unopt_sys_test = sra.apply(X=X.loc[X_test.index], y=y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The *.apply()* method returns a dataframe giving the binary columns of the rules as applied to the given dataset.\n",
    "\n",
    "A useful attribute created by running the *.apply()* method is:\n",
    "\n",
    "* rule_descriptions: A dataframe showing the logic of the generated rules and their performance metrics as applied to the given dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Apply scores"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have the binary columns of our generated, optimised and unparsed rules applied to the test set, we can apply the scores. First, let's combine these binary columns into one dataframe:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test = pd.concat([X_rules_gen_test, X_rules_opt_test, X_rules_unopt_sys_test], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then just multiple the rule scores with these binary columns to apply the scores to the test set:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_scores_test = rs.rule_scores * X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Rule</th>\n",
       "      <th>HighFraudTxnPerAccountNum</th>\n",
       "      <th>JavaEL</th>\n",
       "      <th>RGDT_Rule193</th>\n",
       "      <th>RGDT_Rule241</th>\n",
       "      <th>RGDT_Rule256</th>\n",
       "      <th>RGDT_Rule313</th>\n",
       "      <th>RGDT_Rule_20210304_102</th>\n",
       "      <th>RGDT_Rule_20210304_144</th>\n",
       "      <th>RGDT_Rule_20210304_189</th>\n",
       "      <th>RGDT_Rule_20210304_203</th>\n",
       "      <th>RGDT_Rule_20210304_204</th>\n",
       "      <th>RGDT_Rule_20210304_214</th>\n",
       "      <th>RGDT_Rule_20210304_228</th>\n",
       "      <th>RGDT_Rule_20210304_242</th>\n",
       "      <th>RGDT_Rule_20210304_268</th>\n",
       "      <th>RGDT_Rule_20210304_308</th>\n",
       "      <th>RGDT_Rule_20210304_312</th>\n",
       "      <th>RGDT_Rule_20210304_7</th>\n",
       "      <th>RGDT_Rule_20210304_78</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>eid</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>533-3553708-0918604</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>455-3498977-3144749</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>585-6596459-3918216</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>685-6642742-5806657</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>956-2823525-9957253</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Rule                 HighFraudTxnPerAccountNum  JavaEL  RGDT_Rule193  \\\n",
       "eid                                                                    \n",
       "533-3553708-0918604                          0       0             0   \n",
       "455-3498977-3144749                          0       0             0   \n",
       "585-6596459-3918216                          0       0             0   \n",
       "685-6642742-5806657                          0       0             0   \n",
       "956-2823525-9957253                          0       0             0   \n",
       "\n",
       "Rule                 RGDT_Rule241  RGDT_Rule256  RGDT_Rule313  \\\n",
       "eid                                                             \n",
       "533-3553708-0918604             0             0             0   \n",
       "455-3498977-3144749             0             0             0   \n",
       "585-6596459-3918216             0             0             0   \n",
       "685-6642742-5806657             0             0             0   \n",
       "956-2823525-9957253             0             0             0   \n",
       "\n",
       "Rule                 RGDT_Rule_20210304_102  RGDT_Rule_20210304_144  \\\n",
       "eid                                                                   \n",
       "533-3553708-0918604                       0                       0   \n",
       "455-3498977-3144749                       0                       0   \n",
       "585-6596459-3918216                       0                       0   \n",
       "685-6642742-5806657                       0                       0   \n",
       "956-2823525-9957253                       0                       0   \n",
       "\n",
       "Rule                 RGDT_Rule_20210304_189  RGDT_Rule_20210304_203  \\\n",
       "eid                                                                   \n",
       "533-3553708-0918604                       0                       0   \n",
       "455-3498977-3144749                       0                       0   \n",
       "585-6596459-3918216                       0                       0   \n",
       "685-6642742-5806657                       0                       0   \n",
       "956-2823525-9957253                       0                       0   \n",
       "\n",
       "Rule                 RGDT_Rule_20210304_204  RGDT_Rule_20210304_214  \\\n",
       "eid                                                                   \n",
       "533-3553708-0918604                       0                       0   \n",
       "455-3498977-3144749                       0                       0   \n",
       "585-6596459-3918216                       0                       0   \n",
       "685-6642742-5806657                       0                       0   \n",
       "956-2823525-9957253                       0                       0   \n",
       "\n",
       "Rule                 RGDT_Rule_20210304_228  RGDT_Rule_20210304_242  \\\n",
       "eid                                                                   \n",
       "533-3553708-0918604                       0                       0   \n",
       "455-3498977-3144749                       0                       0   \n",
       "585-6596459-3918216                       0                       0   \n",
       "685-6642742-5806657                       0                       0   \n",
       "956-2823525-9957253                       0                       0   \n",
       "\n",
       "Rule                 RGDT_Rule_20210304_268  RGDT_Rule_20210304_308  \\\n",
       "eid                                                                   \n",
       "533-3553708-0918604                       0                       0   \n",
       "455-3498977-3144749                       0                       0   \n",
       "585-6596459-3918216                       0                       0   \n",
       "685-6642742-5806657                       0                       0   \n",
       "956-2823525-9957253                       0                       0   \n",
       "\n",
       "Rule                 RGDT_Rule_20210304_312  RGDT_Rule_20210304_7  \\\n",
       "eid                                                                 \n",
       "533-3553708-0918604                       0                     0   \n",
       "455-3498977-3144749                       0                     0   \n",
       "585-6596459-3918216                       0                     0   \n",
       "685-6642742-5806657                       0                     0   \n",
       "956-2823525-9957253                       0                     0   \n",
       "\n",
       "Rule                 RGDT_Rule_20210304_78  \n",
       "eid                                         \n",
       "533-3553708-0918604                      0  \n",
       "455-3498977-3144749                      0  \n",
       "585-6596459-3918216                      0  \n",
       "685-6642742-5806657                      0  \n",
       "956-2823525-9957253                      0  "
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_scores_test.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Convert generated rule conditions to system-ready <a name=\"ConvertGenToSys\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have our final rule set and scores, we're almost ready to update the Simility environment. Before doing so, we need to convert the conditions of our generated rules to make them system-ready - this involves the following:\n",
    "\n",
    "* Adding a null condition if the original condition included imputed null values.\n",
    "* Converting conditions with OHE features into conditions that use the original feature.\n",
    "\n",
    "To do this, we can use the *ConvertProcessedConditionsToGeneral* class from the *convert_processed_conditions_to_general* module in the *rules* sub-package. Note that we only need to apply this process to the generated rules, since those are the only rules which reference the processed data.\n",
    "\n",
    "Before we can use this class, we need to provide the following:\n",
    "\n",
    "* A dictionary of the value used to impute nulls for each feature in the original, unprocessed dataset.\n",
    "* A dictionary of the category linked to each One Hot Encoded column.\n",
    "\n",
    "To get these dictionaries, we can use the *ReturnMappings* class from the *convert_processed_conditions_to_general* module in the *rules* sub-package:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "rm = ReturnMappings()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "imputed_values_mapping = rm.return_imputed_values_mapping([num_cols, -1], [cat_cols, 'missing'], [bool_cols, 'missing'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "ohe_categories_mapping = rm.return_ohe_categories_mapping(pre_ohe_cols=X.columns, post_ohe_cols=X_train.columns, pre_ohe_dtypes=X.dtypes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have our mapping dictionaries for imputed values and one hot encoded values, we can convert the logic of our generated rules to make them system-ready:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "conv_gen_rules = ConvertProcessedConditionsToGeneral(imputed_values=imputed_values_mapping, ohe_categories=ohe_categories_mapping)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "conv_gen_rule_strings = conv_gen_rules.convert(rule_strings=rg_dt.rules.rule_strings, X=X_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The *.convert()* method returns a dictionary containing the set of rules which account for imputed/OHE variables, defined using the standard ARGO string format (values) and their names (keys). \n",
    "\n",
    "**Note the following:**\n",
    "\n",
    "- If a numeric rule condition initially had a threshold such that the imputed null values were included in the condition, the converted condition has an additional condition to check whether the feature is also null. \n",
    "    - E.g. *RGDT_Rule4* was intially *(X['num_items']<=1)*, which included the imputed value of 0. The converted rule is now *((X['num_items']<=1)|(X['num_items'].isna()))*, with an additional condition to check for nulls.\n",
    "- If a categorical rule condition checks whether the value is the imputed null category, the converted condition is such that it will explicitly check for null values. \n",
    "    - E.g. *RGDT_Rule7* was initially *(X['country_missing']==True)*. The converted rule is now *(X['country'].isna())*, such that it explicitly checks for null values.\n",
    "- For categorical rule conditions, the converted condition is such that it will explicitly check for the category. \n",
    "    - E.g. *RGDT_Rule3* was initially *(X['country_US']==False)*. The converted rule is now *(X['country']!='US')*, such that it explicitly checks whether the 'country' column is not equal to the 'US' category.\n",
    "\n",
    "A useful attribute created by running the *.convert()* method is:\n",
    "\n",
    "* rules: Class containing the rules stored in the standard ARGO string format. Methods from this class can be used to convert the rules into the standard ARGO dictionary or lambda expression representations. See the *rules* module for more information."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generate/update the system-ready configs of the rules <a name=\"GenUpdateSysConfigs\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have our final system-ready rule set and scores, we can generate system-ready configs for the rules. How we do this depends on the type of rule:\n",
    "\n",
    "* Generated rules: We use the *CreateNewConfigs* class from the *create_new_configs* module in the *system_config_generation* sub-package to generate new system-ready JSON configs.\n",
    "* Optimised system rules: We use the *UpdateExistingConfigs* class from the *update_existing_configs* module in the *system_config_generation* sub-package to update the threshold values and scores of the existing system-ready JSON configs.\n",
    "* Unoptimised (but scored) system rules: We use the *UpdateExistingConfigs* class from the *update_existing_configs* module in the *system_config_generation* sub-package to update the scores of the existing system-ready JSON configs.\n",
    "* Inactivate system rules no longer required: We use the *UpdateExistingConfigs* class from the *update_existing_configs* module in the *system_config_generation* sub-package to update the status of the system rules that were originally active in the system, but have now been deemed unnecessary (either due to being correlated or poorly performing):"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Generated rules"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before we can instatiate the *CreateNewConfigs* class, we need to get the Cassandra datatypes and field names for each pipeline output field used in the rule set. To do this, we can use the *ReturnPipelineOutputDatatypes* and *ReturnCassandraPipelineOutputMapping* classes from the *cassandra_requests* module in the *simility_requests* sub-package:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "rpodt = ReturnPipelineOutputDatatypes(url=url,\n",
    "                                      app_prefix=app_prefix,\n",
    "                                      user=user,\n",
    "                                      base_entity=base_entity)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "po_dtypes = rpodt.request()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "rcpom = ReturnCassandraPipelineOutputMapping(url=url,\n",
    "                                             app_prefix=app_prefix,\n",
    "                                             user=user,\n",
    "                                             base_entity=base_entity)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "cassandra_field_names = rcpom.request()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have the Cassandra datatypes and field names for each pipeline output field, we can convert the conditions of the generated rules into the system-ready format:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_gen_rules_sys_dicts = conv_gen_rules.rules.as_system_dicts(field_datatypes=po_dtypes, \n",
    "                                                                 cassandra_field_names=cassandra_field_names)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once we have the rule conditions in the system-ready format, we can generate the final system-ready configurations:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "cnc = CreateNewConfigs(conditions=final_gen_rules_sys_dicts, \n",
    "                       scores=rs.rule_scores, \n",
    "                       app_prefix=app_prefix, \n",
    "                       entity=base_entity, \n",
    "                       make_active=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_gen_rule_configs = cnc.generate()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The *.generate()* method returns a dictionary of the system-ready JSON configurations for each rule. It also saves this dictionary as the class attribute *rule_configs*. These configurations can be used with the *create_rules_in_simility* module in the *simility_requests* sub-package to generate the provided rules in a given Simility instance."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Optimised rules"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before we can instatiate the *UpdateExistingConfigs* class, we need to get the original rule configurations from the Simility environment, so that the conditions and the scores can be updated within the configurations. To do this, we can use the *ReturnRuleConfigsFromSimility* class from the *rule_requests* module in the *simility_requests* sub-package:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "rrcfs = ReturnRuleConfigsFromSimility(url=url,\n",
    "                                      app_prefix=app_prefix,\n",
    "                                      user=user,\n",
    "                                      entity=base_entity,\n",
    "                                      rules=system_opt.rules.rule_strings.keys()\n",
    "                                     )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "opt_rules_sys_configs = rrcfs.request()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use the Cassandra datatypes and field names for each pipeline output field (generated in the previous step) to convert the conditions of the optimised rules into the system-ready format:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_opt_rules_sys_dicts = system_opt.rules.as_system_dicts(field_datatypes=po_dtypes, \n",
    "                                                             cassandra_field_names=cassandra_field_names)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have the original configurations and the optimised rule coniditions in the system-ready format, we can update the configurations to reflect the optimised thresholds and scores:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "uec = UpdateExistingConfigs(rule_configs=opt_rules_sys_configs, \n",
    "                            updated_conditions=final_opt_rules_sys_dicts, \n",
    "                            updated_scores=rs.rule_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_opt_rule_configs = uec.update()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The *.update()* method returns a dictionary of the updated system-ready JSON configurations for each rule. It also saves this dictionary as the class attribute *updated_rule_configs*. These configurations can be used with the *update_rules_in_simility* module in the *simility_requests* sub-package to update the provided rules in a given Simility instance."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Un-optimised rules"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before we can instatiate the *UpdateExistingConfigs* class, we need to get the original rule configurations from the Simility environment, so that the scores can be updated within the configurations. To do this, we can use the *ReturnRuleConfigsFromSimility* class from the *rule_requests* module in the *simility_requests* sub-package:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "rrcfs = ReturnRuleConfigsFromSimility(url=url,\n",
    "                                      app_prefix=app_prefix,\n",
    "                                      user=user,\n",
    "                                      entity=base_entity,\n",
    "                                      rules=final_rules_cannot_be_applied\n",
    "                                     )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "unopt_rules_sys_configs = rrcfs.request()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have the original configurations, we can update the configurations to reflect the optimised scores:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "uec = UpdateExistingConfigs(rule_configs=unopt_rules_sys_configs, \n",
    "                            updated_scores=rs.rule_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_unopt_rule_configs = uec.update()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The *.update()* method returns a dictionary of the updated system-ready JSON configurations for each rule. It also saves this dictionary as the class attribute *updated_rule_configs*. These configurations can be used with the *update_rules_in_simility* module in the *simility_requests* sub-package to update the provided rules in a given Simility instance."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### System rules no longer required"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before we can instatiate the *UpdateExistingConfigs* class, we need to know which system rules were in the original set that were fetched for the rule optimisation process, that are no longer in the final set of rules. To do this, we can iterate through the original rule names and check for those that aren't present in either the final optimised rule set or the final unparsed rule set:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "sys_rules_inactivate = [rule_name for rule_name in orig_sys_conditions.keys() \n",
    "                        if rule_name not in system_opt.rules.rule_strings.keys() and rule_name not in final_rules_cannot_be_applied]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have the list of rule names we need to inactivate, we can return their original configurations:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "rrcfs = ReturnRuleConfigsFromSimility(url=url,\n",
    "                                      app_prefix=app_prefix,\n",
    "                                      user=user,\n",
    "                                      entity=base_entity,\n",
    "                                      rules=sys_rules_inactivate\n",
    "                                     )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "sys_rules_inactivate_configs = rrcfs.request()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can update the configurations to reflect the change in status:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "uec = UpdateExistingConfigs(rule_configs=sys_rules_inactivate_configs, \n",
    "                            make_inactive=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_sys_rules_inactivate_configs = uec.update()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The *.update()* method returns a dictionary of the updated system-ready JSON configurations for each rule. It also saves this dictionary as the class attribute *updated_rule_configs*. These configurations can be used with the *update_rules_in_simility* module in the *simility_requests* sub-package to update the provided rules in a given Simility instance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(13, 5, 1, 15)"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(final_gen_rule_configs), len(final_opt_rule_configs), len(final_unopt_rule_configs), len(final_sys_rules_inactivate_configs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Update the Simility environment with the final rule set <a name=\"UpdateSimility\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have the system-ready configurations for our generated, optimised, un-parsed and inactivated rules, we can update the Simility environment with the final rule set. Note that we also need to inactivate the system rules that were originally active in the system, but have now been deemed uneccessary (either due to being correlated or poorly performing):"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Generated rules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cris = CreateRulesInSimility(url=url,\n",
    "                             app_prefix=app_prefix,\n",
    "                             user=user)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cris.request(rule_configs=final_gen_rule_configs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The *.request()* method does not return a value; however, once it has ran successfully, you should see the rules have been created in the Simility environment specified."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Optimised rules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "uris = UpdateRulesInSimility(url=url,\n",
    "                             app_prefix=app_prefix,\n",
    "                             user=user)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "uris.request(rule_configs=final_opt_rule_configs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Un-optimised rules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "uris.request(rule_configs=final_unopt_rule_configs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### System rules no longer required"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "uris.request(rule_configs=final_sys_rules_inactivate_configs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The *.request()* method does not return a value; however, once it has ran successfully, you should see the rules have been updated in the Simility environment specified."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The End"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That's it folks - if you have any queries or suggestions please put them in the *#sim-datatools-help* Slack channel or email James directly."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "argov2",
   "language": "python",
   "name": "argov2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
